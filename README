# How to get, compile and run SPS at the CMC.

Warning: this repository uses submodules. Make sure you follow the
instructions below.

# getting sps git repository
# choose one of the following methods

# 1. cloning only the necessary components:
git clone git@gitlab.science.gc.ca:MIG/sps.git
cd sps

# 2. or cloning everything, including rpn-si libraries (rmn, vgrid, rpncomm, tdpack) in one step
# (necessary, for now, to compile with gnu)
git clone --recursive git@gitlab.science.gc.ca:MIG/sps.git
cd sps

# 3. or cloning in several steps
git clone git@gitlab.science.gc.ca:MIG/sps.git
cd sps
# Update rpn-si libraries and cmake_rpn submodules
git submodule update --init --recursive

# choosing your branch
git branch -a # list all branches
git checkout name_of_the_branch # checkout a branch

# if you want, create your own branch
git checkout -b mybranch

# preparing sps compilation
./scripts/link-dbase.sh

. ./.eccc_setup_intel

# Or with gnu
# Please note you cannot compile with Intel and then with GNU in the same shell
# Please also note that, for now,  you need to compile with RPN-SI libraries
# sources (see methods 2. and 3. above)
. ./.eccc_setup_gnu

# Before the first build, or if you made important changes (such as updating
# other submodules, or adding or removing source files):
. ./.initial_setup

# building and installing SPS
# see Makefile for options
# for example, make cmake-all compiles everything: you need to
# update rpn-si submodules to use it (see method 2. above)
# make cmake compiles only sps, modelutils and rpnphy
make cmake
# compile
make -j
# install in working directory
make -j work
# you can also use make -j work to compile and install in the same step.

# running SPS: example
cd $SPS_WORK
sps.sh --dircfg ./configurations/SPS_cfgs --ptopo 2x2x1 --inorder

# structure of the working environment
The structure of the build and work directories is different whether the
$storage_model environment variable exists:

The following environment variables are created (examples):
- sps_DIR = directory where the git clone was created
- SPS_WORK = work directory
- SPS_ARCH = architecture, for example ubuntu-18.04-amd64-64-intel-2022.1.2
- COMPILER_SUITE = compiler suite, for example Intel
- COMPILER_VERSION = compiler version, for example 2022.1.2

- SPS_STORAGE_DIR = where build and work directories are situated
  - Example if $storage_model variable exists:
    - SPS_STORAGE_DIR=/local/storage/sps/ubuntu-18.04-amd64-64-intel-2022.1.2
    - in sps_DIR:
      - build-ubuntu-18.04-amd64-64-intel-2022.1.2 is a link, such as:
        /local/storage/sps/ubuntu-18.04-amd64-64-intel-2022.1.2/build
      - work-ubuntu-18.04-amd64-64-intel-2022.1.2 is a link, such as:
        /local/storage/sps/ubuntu-18.04-amd64-64-intel-19.0.3.199/work

  - Example if $storage_model variable doesn't exist:
    - SPS_STORAGE_DIR=$HOME/sps/
    - directories situated in sps_DIR:
      - build-ubuntu-18.04-amd64-64-intel-2022.1.2
      - work-ubuntu-18.04-amd64-64-intel-19.0.3.199
